package org.apache.commons.graph.export;

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.PrintWriter;
import java.io.Writer;
import java.util.Date;

import org.apache.commons.graph.DirectedGraph;
import org.apache.commons.graph.Graph;
import org.apache.commons.graph.VertexPair;

final class DotExporter<V, E, G extends Graph<V, E>>
    extends AbstractExporter<V, E, G>
{

    private static final String GRAPH = "graph";

    private static final String DIGRAPH = "digraph";

    private static final String CONNECTOR = "--";

    private static final String DICONNECTOR = "->";

    public DotExporter( G graph, Writer writer, String name )
    {
        super( graph, writer, name );
    }

    @Override
    protected void internalExport()
        throws Exception
    {
        String graphDeclaration;
        String connector;

        if ( getGraph() instanceof DirectedGraph )
        {
            graphDeclaration = DIGRAPH;
            connector = DICONNECTOR;
        }
        else
        {
            graphDeclaration = GRAPH;
            connector = CONNECTOR;
        }

        PrintWriter printWriter = new PrintWriter( getWriter() );

        printWriter.format( "# Graph generated by Apache Commons Graph on %s%n", new Date() );
        printWriter.format( "%s %s {%n", graphDeclaration, getName() );

        for ( V vertex : getGraph().getVertices() )
        {
            printWriter.format( "  %s [label=\"%s\"];%n", vertex.hashCode(), vertex.toString() );
        }

        for ( E edge : getGraph().getEdges() )
        {
            VertexPair<V> vertexPair = getGraph().getVertices( edge );

            printWriter.format( "  %s %s %s",
                                vertexPair.getHead().hashCode(),
                                connector,
                                vertexPair.getTail().hashCode() );

            boolean attributesFound = false;

            /*if ( edge instanceof Labeled )
            {
                attributesFound = true;
                printWriter.format( " [label=\"%s\"", ( (Labeled) edge ).getLabel() );
            }
            if ( edge instanceof WeightedEdge )
            {
                Object weight = ( (WeightedEdge<?>) edge ).getWeight();

                if ( weight instanceof Number )
                {
                    printWriter.format( " " );

                    if ( !attributesFound )
                    {
                        printWriter.format( "[" );
                        attributesFound = true;
                    }

                    printWriter.format( "weight=%f", ( (Number) weight ).doubleValue() );
                }
            }*/

            if ( attributesFound )
            {
                printWriter.format( "]" );
            }

            printWriter.format( "%n" );
        }

        printWriter.write( '}' );
    }

}
